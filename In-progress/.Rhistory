family_tibble = read_tsv(lvl5_path,skip = 1)
View(family_tibble)
View(family_tibble)
head(family_tibble)
family_mat = family_tibble[:,1:]
family_mat = family_tibble[;,1:]
family_mat = family_tibble[:,:]
family_mat = family_tibble[,1:]
family_mat = family_tibble[,1::]
family_mat = select(family_tibble,1::)
family_mat = select(family_tibble,num_range(2,10))
family_tibble[,1:2]
family_tibble[,1:]
family_tibble[,1::]
taxonomy_strings = family_tibble[,1]
family_counts = family_tibble[,1:210]
View(taxonomy_strings)
View(family_counts)
family_counts = family_tibble[,2:210]
View(taxonomy_strings)
taxonomy_columns <- tidyr::separate(taxonomy_strings, col='OTU ID', into=c('Kingdom', 'Phylum', 'Class', 'Order', 'Family', sep=' ;[a-zA-Z]__')
))
taxonomy_columns <- tidyr::separate(taxonomy_strings, col='OTU ID', into=c('Kingdom', 'Phylum', 'Class', 'Order', 'Family'), sep=' ;[a-zA-Z]__')
taxonomy_columns <- tidyr::separate(taxonomy_strings, col='OTU ID', into=c('Kingdom', 'Phylum', 'Class', 'Order', 'Family'), sep=' ;')
taxonomy_columns <- tidyr::separate(taxonomy_strings, col='OTU ID', into=c('Kingdom', 'Phylum', 'Class', 'Order', 'Family'), sep=';')
taxonomy_columns <- tidyr::separate(taxonomy_strings, col='OTU ID', into=c('Kingdom', 'Phylum', 'Class', 'Order', 'Family'), sep=';[a-zA-Z]__')
View(taxonomy_columns)
taxonomy_columns <- tidyr::separate(taxonomy_strings, col='OTU ID', into=c('Kingdom', 'Phylum', 'Class', 'Order', 'Family'), sep=';')
# Import Metadata
sample_data = read_tsv(file='../../Metadata/ibp_metadata_4.17.18.txt')
View(sample_data)
family_counts.columns
family_counts
family_counts.colnames
colnames(family_counts)
sample_data2 = tidyr::filter(sample_data, SampleID %in% colnames(family_counts))
sample_data2 = filter(sample_data, SampleID %in% colnames(family_counts))
View(sample_data2)
all.equal(colnames(family_counts), sample_data2['SampleID'])
sample_data2[SampleID]
sample_data2['SampleID']
as_vector(sample_data2['SampleID'])
all.equal(colnames(family_counts), as_vector(sample_data2['SampleID']))
View(family_counts)
View(taxonomy_columns)
View(taxonomy_strings)
row.names(taxonomy_columns) <- taxonomy_strings
View(taxonomy_strings)
row.names(taxonomy_columns) <- taxonomy_strings['OTU ID']
row.names(taxonomy_columns) <- as_vector(taxonomy_strings['OTU ID'])
taxonomy_col_mat <- as.data.frame(taxonomy_columns)
row.names(taxonomy_col_mat) <- as_vector(taxonomy_strings['OTU ID'])
View(taxonomy_col_mat)
family_count_mat <- as.data.frame(family_counts)
View(family_count_mat)
family_count_mat <- as.data.frame(family_counts)
row.names(family_count_mat) <- as_vector(taxonomy_strings['OTU ID'])
# Merge everything into a phyloseq object:
OTU = otu_table(family_count_mat, taxa_are_rows = TRUE)
TAX = tax_table(taxonomy_col_mat)
#
taxonomy_col_mat <- as.matrix(taxonomy_columns)
View(taxonomy_col_mat)
physeq = phyloseq(OTU, TAX)
taxa_names(TAX)
taxonomy_col_mat
taxa_names(TAX)
taxa_names(OTU)
row.names(TAX)
View(taxonomy_col_mat)
row.names(taxonomy_col_mat) <- as_vector(taxonomy_strings['OTU ID'])
row.names(taxonomy_col_mat)
TAX = tax_table(taxonomy_col_mat)
physeq = phyloseq(OTU, TAX)
View(physeq)
physeq
merge_phyloseq(physeq, sample_data2)
physeq <- merge_phyloseq(physeq, sample_data2)
physeq
merge_phyloseq(physeq, sample_data2)
View(sample_data2)
row.names(sample_data2) <- sample_data2['SampleID']
sample_data3 <- as.data.frame(sample_data2)
row.names(sample_data3) <- sample_data3['SampleID']
View(sample_data3)
duplicated(sample_data3['SampleID']
)
anyduplicated(sample_data3['SampleID'])
anyDuplicated(sample_data3['SampleID'])
rownames(sample_data3) <- sample_data3[,'SampleID']
View(sample_data3)
merge_phyloseq(physeq, sample_data2)
merge_phyloseq(physeq, sample_data3)
sample_names(OTU)
p2 <- merge_phyloseq(physeq, sample_data3)
type(sample_data3)
typeof(sample_data3)
class(sample_data3)
sd <- `sample_data<-`(sample_data3)
sd <- `sample_data<-(sample_data3)
)
)
sd <- sample_data<-(sample_data3)
View(sd)
p2 <- merge_phyloseq(physeq, sd)
p2
rownames(sd)
phyloseq(sd)
phyloseq(sample_data3)
?sample_data
sample_names(physeq)
sample_names(physeq) == sample_names(sd)
sample_map = phyloseq::sample_data(sample_data3)
physeq = phyloseq(OTU, TAX, sample_map)
View(physeq)
head(sample_data(physeq($USDA_soil_series)))
head(sample_data(physeq)$USDA_soil_series))
head(sample_data(physeq))#
head(sample_data(physeq)$SampleID)#
head(sample_data(physeq)$USDA_soil_series)#
samp_data = read_tsv(file='../../Metadata/ibp_metadata_4.17.18.txt')
samp_data = filter(sample_data, SampleID %in% colnames(family_counts))
samp_data <- as.data.frame(sample_data)
rownames(samp_data) <- samp_data[,'SampleID']
samp_data['USDA_soil_series'] <- as.factor(samp_data['USDA_soil_series'])
samp_data = read_tsv(file='../../Metadata/ibp_metadata_4.17.18.txt')
samp_data = filter(sample_data, SampleID %in% colnames(family_counts))
samp_data <- as.data.frame(sample_data)
rownames(samp_data) <- samp_data[,'SampleID']
samp_data[, 'USDA_soil_series'] <- as.factor(samp_data[, 'USDA_soil_series'])
OTU = otu_table(family_count_mat, taxa_are_rows = TRUE)
TAX = tax_table(taxonomy_col_mat)
sample_map = phyloseq::sample_data(samp_data)
physeq = phyloseq(OTU, TAX, sample_map)
head(sample_data(physeq)$USDA_soil_series)#
packageVersion('DESeq2')
# Convert the DESeq2 data
soilDDS <- phyloseq_to_deseq2(physeq ~ USDA_soil_series)
View(physeq)
physeq = phyloseq(OTU, TAX, `sample_data<-`(sample_map))
physeq = phyloseq(OTU, TAX, sample_data<-(sample_map))
View(physeq)
sample_data(physeq)
# Convert the DESeq2 data
soilDDS <- phyloseq_to_deseq2(physeq ~ USDA_soil_series)
# Convert the DESeq2 data
soilDDS <- phyloseq_to_deseq2(physeq, ~ USDA_soil_series)
soilDDS = DESeq(soilDDS, test="Wald", fitType="parametric")
packageVersion('DESeq2')
packageVersion('phyloseq')
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(soilDDS), 1, gm_mean)
soilDDS = estimateSizeFactors(soilDDS, geoMeans = geoMeans)
soilDDS = DESeq(soilDDS, fitType="local")
res = results(soilDDS)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.01
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
head(sigtab)
res = results(soilDDS)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.05
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
head(sigtab)
View(sigtab)
res = results(soilDDS)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.01
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
head(sigtab)
res = results(soilDDS)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.001
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
head(sigtab)
sigtab
sample_data(physeq)
sample_data(physeq)['pH']
sample_data(physeq)[,'pH']
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ col)
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab)
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
pH_sig_dds <- phy_to_DESeq_wrapper(physeq, 'pH', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ col)
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
physeq = phyloseq(OTU, TAX, sample_data<-(sample_map))
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ col)
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ 'USDA_soil_series')
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ 'pH')
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ pH)
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
pH_sig_dds <- phy_to_DESeq_wrapper(physeq, 'pH', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(col)) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
col = 'sup'
eval(col)
col = 'sup'
eval(parse(col))
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(col) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(col) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, USDA_soil_series, .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ col )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, USDA_soil_series, .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ col )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, pH, .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(text = paste(col))) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, pH, .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(text = col)) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'pH', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(text = col)) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, pH, .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
print(col)
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(text = col)) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, pH, .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
print(col)
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(text = col)) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'pH', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
print(col)
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(text = col)) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, col='pH', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
print(col)
phy_dds <- phyloseq_to_deseq2(physeq, ~ eval(parse(text = col)) )
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, col=eval('pH'), .01)
col = 'sup'
paste0("physeq", " ~ ", col)
col = 'sup'
paste0(physeq, " ~ ", col)
col = 'sup'
paste0(~ col)
col = 'sup'
paste0(~, eval(col))
col = 'sup'
paste0('~', col)
col = 'sup'
paste0(' ~ ', col)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
form <- as.formula( paste0(' ~ ', col) )
phy_dds <- phyloseq_to_deseq2(physeq, form)
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, pH, .01)
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'pH', .01)
# Calculate geometric means, among other things it essentially downweights samples with high spread:
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
phy_to_DESeq_wrapper = function(physeq, col, alpha){
form <- as.formula( paste0(' ~ ', col) )
phy_dds <- phyloseq_to_deseq2(physeq, form)
geoMeans = apply(counts(phy_dds), 1, gm_mean)
phy_dds = estimateSizeFactors(phy_dds, geoMeans = geoMeans)
phy_dds = DESeq(phy_dds, fitType="local")
res = results(phy_dds)
res = res[order(res$padj, na.last=NA), ]
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
return(sigtab) }
soil_sig_dds <- phy_to_DESeq_wrapper(physeq, 'USDA_soil_series', .01)
pH_sig_dds <- phy_to_DESeq_wrapper(physeq, 'pH', .01)
